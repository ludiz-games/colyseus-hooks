{"version":3,"sources":["../src/index.ts","../src/colyseus.ts","../src/store.ts"],"sourcesContent":["export { colyseus } from \"./colyseus\";\nexport { store } from \"./store\";\n","import { Schema } from \"@colyseus/schema\";\nimport { Client, type Room } from \"colyseus.js\";\nimport { useSyncExternalStore } from \"react\";\n\nimport { store } from \"./store\";\n\nexport const colyseus = <S = Schema>(\n  endpoint: string,\n  schema?: new (...args: unknown[]) => S\n) => {\n  const client = new Client(endpoint);\n\n  const roomStore = store<Room<S> | undefined>(undefined);\n  const stateStore = store<S | undefined>(undefined);\n\n  let connecting = false;\n\n  const connectToColyseus = async (roomName: string, options = {}) => {\n    if (connecting || roomStore.get()) return;\n\n    connecting = true;\n\n    try {\n      const room = await client.joinOrCreate<S>(roomName, options, schema);\n\n      roomStore.set(room);\n      stateStore.set(room.state);\n\n      const updatedCollectionsMap: { [key in keyof S]?: boolean } = {};\n\n      for (const [key, value] of Object.entries(room.state as Schema)) {\n        if (\n          typeof value !== \"object\" ||\n          !value.clone ||\n          !value.onAdd ||\n          !value.onRemove\n        ) {\n          continue;\n        }\n\n        updatedCollectionsMap[key as keyof S] = false;\n\n        value.onAdd(() => {\n          updatedCollectionsMap[key as keyof S] = true;\n        });\n\n        value.onRemove(() => {\n          updatedCollectionsMap[key as keyof S] = true;\n        });\n      }\n\n      room.onStateChange((state) => {\n        if (!state) return;\n\n        const copy = { ...state };\n\n        for (const [key, update] of Object.entries(updatedCollectionsMap)) {\n          if (!update) continue;\n\n          updatedCollectionsMap[key as keyof S] = false;\n\n          const value = state[key as keyof S] as unknown;\n\n          if ((value as Schema).clone) {\n            //@ts-expect-error - Schema.clone() return type is not properly typed\n            copy[key as keyof S] = value.clone();\n          }\n        }\n\n        stateStore.set(copy);\n      });\n\n      console.log(\n        `Successfully connected to Colyseus room ${roomName} at ${endpoint}`\n      );\n    } catch (e) {\n      console.error(\"Failed to connect to Colyseus!\");\n      console.log(e);\n    } finally {\n      connecting = false;\n    }\n  };\n\n  const disconnectFromColyseus = async () => {\n    const room = roomStore.get();\n    if (!room) return;\n\n    roomStore.set(undefined);\n    stateStore.set(undefined);\n\n    try {\n      await room.leave();\n      console.log(\"Disconnected from Colyseus!\");\n    } catch {}\n  };\n\n  const useColyseusRoom = () => {\n    const subscribe = (callback: () => void) =>\n      roomStore.subscribe(() => callback());\n\n    const getSnapshot = () => {\n      const colyseus = roomStore.get();\n      return colyseus;\n    };\n\n    return useSyncExternalStore(subscribe, getSnapshot);\n  };\n\n  function useColyseusState(): S | undefined;\n  function useColyseusState<T extends (state: S) => unknown>(\n    selector: T\n  ): ReturnType<T> | undefined;\n  function useColyseusState<T extends (state: S) => unknown>(selector?: T) {\n    const subscribe = (callback: () => void) =>\n      stateStore.subscribe(() => callback());\n\n    const getSnapshot = () => {\n      const state = stateStore.get();\n      return state && selector ? selector(state) : state;\n    };\n\n    return useSyncExternalStore(subscribe, getSnapshot);\n  }\n\n  return {\n    client,\n    connectToColyseus,\n    disconnectFromColyseus,\n    useColyseusRoom,\n    useColyseusState,\n  };\n};\n","export function store<T>(value: T) {\n  let state = value;\n\n  const subscribers = new Set<() => void>();\n\n  const get = () => state;\n  const set = (value: T) => {\n    state = value;\n    subscribers.forEach((callback) => callback());\n  };\n  const subscribe = (callback: () => void) => {\n    subscribers.add(callback);\n    return () => subscribers.delete(callback);\n  };\n\n  return { get, set, subscribe };\n}\n"],"mappings":"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","names":["value","colyseus"]}